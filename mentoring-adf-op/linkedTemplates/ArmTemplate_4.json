{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-op"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_AzureBlob_to_adls')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_i03",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "online//"
							},
							{
								"name": "Destination",
								"value": "raw/online/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@pipeline().parameters.windowStart",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@pipeline().parameters.windowEnd",
										"type": "Expression"
									},
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_i03",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_i03",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"windowStart": {
						"type": "String"
					},
					"windowEnd": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-21T10:46:53Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMart movies populating')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OnlineServices",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"ServiceCode"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ServiceCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ServiceCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ServiceName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ServiceName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Movies",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT MovieIdNK\n      ,Title\n      ,ReleaseDate\n      ,Runtime\n      ,s.MovieStatusName as MovieStatusName\n      ,m.CreatedDate\n      ,ModifiedDate\n  FROM tMovies m\n  join tMovieStatus s on m.MovieStatusId = s.MovieStatusId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"MovieIdNK"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MovieIdNK",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "MovieIdNK",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Title",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ReleaseDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "ReleaseDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Runtime",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Runtime",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "MovieStatusName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MovieStatus",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MoviesDBtMovies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-15T10:38:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact tabls pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FactOnlinePurchase",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy DimMovie",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy DimOnlineService",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT year(TransactionDate)*10000+month(TransactionDate)*100+day(TransactionDate) as DateKey\n      ,se.ServiceKey\n      ,m.MovieKey\n      ,Price\n      ,TransactionId\n  FROM tOnlinePurchase p \n  join tOnlineService s on p.ServiceId = s.ServiceId\n  join tMovies mov on p.MovieId = mov.MovieId\n  join DimMovieExternal m on m.MovieIdNK = mov.MovieIdNK\n  join DimOnlineServiceExternal se on se.ServiceCode = s.ServiceCode",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"TransactionId"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DateKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "DateKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ServiceKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "OnlineServiceKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "MovieKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "MovieKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "Price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "movies_tOnlinePurchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataMart_FactOnlinePurchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy DimMovie",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table dbo.DimMovieExternal",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MovieKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "MovieKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "MovieIdNK",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "MovieIdNK",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Title",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ReleaseDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "ReleaseDate",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Runtime",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Runtime",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "MovieStatus",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "MovieStatus",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "movies_DimMovieExternal",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy DimOnlineService",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table dbo.DimOnlineServiceExternal",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ServiceKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ServiceKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ServiceCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ServiceCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "ServiceName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "ServiceName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "CreatedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "movies_DimOnlineServiceExternal",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "FactOnlinePurchase_MonthlySnapshot",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy DimOnlineService",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select  year(TransactionDate)*100+month(TransactionDate) as month_key,\n\t\t\tServiceKey,\n\t\t\tsum(Price) as PurchiseAmount,\n\t\t\tcount(*) as PurchaseQuantity\nfrom tOnlinePurchase p\njoin tOnlineService s on p.ServiceId = s.ServiceId\njoin DimOnlineServiceExternal se on se.ServiceCode = s.ServiceCode\ngroup by year(TransactionDate)*100+month(TransactionDate), ServiceKey",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"MonthKey"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "month_key",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "MonthKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ServiceKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "OnlineServiceKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "PurchiseAmount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 38
										},
										"sink": {
											"name": "PurchaseAmount",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 10
										}
									},
									{
										"source": {
											"name": "PurchaseQuantity",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "PurchaseQuantity",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "movies_tOnlinePurchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataMart_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-15T15:26:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fail test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@decodeUriComponent(activity('Get logic app url from secret').output.value)",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n\"pipelineName\" : \"@{pipeline().Pipeline}\",\n\"ErrorMessage\": \"@{string(replace(activity('Copy data1').output.errors[0].Message, '\"',''''))}\",\n\"Status\": \"@{activity('Copy data1').output.executionDetails[0].status}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get logic app url from secret",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from NoTable",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MoviesDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoviesDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get logic app url from secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(string(pipeline().globalParameters.LogicAppAzurementoringlogappsopURL), '?api-version=7.0')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-05T11:24:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental load from local db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CinemaTickets_to_movies",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "wm",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM [dbo].[Tickets]\nWHERE [TransactionDt] > '@{activity('wm').output.firstRow.watermark}';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": false,
									"keys": [
										"transaction_id"
									],
									"interimSchemaName": "stg"
								},
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CinemaTicketsLocalDB",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "azureSQLDatabaseMovies_cinema_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "spPopulateCinemaTables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CinemaTickets_to_movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinemaTables]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "wm",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select [Watermark] \nfrom [dbo].[watermarkable]\nwhere [TableName] = '[stg].[cinema_tickets]'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "update watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "nwm",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@activity('nwm').output.firstRow.newWatermark",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"TableName": {
									"value": "[[stg].[cinema_tickets]",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "nwm",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "spPopulateCinemaTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT max([transaction_date]) as newWatermark\nFROM [stg].[cinema_tickets]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azureSQLDatabaseMovies_cinema_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-11T16:31:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load data to online_purchase staging table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load data from azure blob to azure SQL staging table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "file_name",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipeline_id",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"modifiedDatetimeStart": {
										"value": "@pipeline().parameters.LastWatermarkDate",
										"type": "Expression"
									},
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "Truncate table [stg].[online_purchase]",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"transaction_id"
									]
								},
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['file_name']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipeline_id']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "AzureBlobOnlineContainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable_stg_online_purchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"LastWatermarkDate": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-25T10:03:55Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parallel copy testing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from azure blob to azure SQL staging table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "file_name",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipeline_id",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "Truncate table [stg].[online_purchase]",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"transaction_id"
									]
								},
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['file_name']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipeline_id']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "AzureBlobOnlineContainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable_stg_online_purchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-24T10:29:35Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parametrized copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup control metadata table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Stored procedure InsertLogPipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "movies_tControlMetadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup control metadata table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@json(string(activity('Lookup control metadata table').output.value))",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "set schema_and_table_name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "source_filename",
													"value": "$$FILEPATH"
												},
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": false,
												"wildcardFolderPath": {
													"value": "@item().SourceFolder",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('truncate table ', variables('schema_and_table_name'))}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": true,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"validateDataConsistency": true,
										"dataIntegrationUnits": {
											"value": "@item().DIUValue",
											"type": "Expression"
										},
										"translator": {
											"value": "@json(string(item().Mapping))",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "Parametrized_dataset",
											"type": "DatasetReference",
											"parameters": {
												"container_name": {
													"value": "@item().SourceContainer",
													"type": "Expression"
												},
												"folder_name": {
													"value": "@item(). SourceFolder",
													"type": "Expression"
												},
												"file_name": {
													"value": "@item().FileName",
													"type": "Expression"
												},
												"column_delimiter": {
													"value": "@item().ColumnDelimiter",
													"type": "Expression"
												},
												"escape_charecter": {
													"value": "@item().EscapeCharacter",
													"type": "Expression"
												},
												"quote_character": {
													"value": "@item().QuoteCharacter",
													"type": "Expression"
												},
												"row_delimiter": {
													"value": "@item().RowDelimiter",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "MoviesParameterized",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@item().DestinationTable",
													"type": "Expression"
												},
												"schema_name": {
													"value": "@item().DestinationSchema",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "set schema_and_table_name",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "schema_and_table_name",
										"value": {
											"value": "@concat(item().DestinationSchema,'.',item().DestinationTable)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Stored procedure InsertLogBilling",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[InsertLogBilling]",
										"storedProcedureParameters": {
											"Duration": {
												"value": {
													"value": "@activity('Copy data1').output.billingReference.billableDuration[0].duration",
													"type": "Expression"
												},
												"type": "Double"
											},
											"MeterType": {
												"value": {
													"value": "@activity('Copy data1').output.billingReference.billableDuration[0].meterType",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"Unit": {
												"value": {
													"value": "@activity('Copy data1').output.billingReference.billableDuration[0].unit",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Stored procedure InsertLogStatistics",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[InsertLogStatistics]",
										"storedProcedureParameters": {
											"CopiedRows": {
												"value": {
													"value": "@activity('Copy data1').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ParallelCopies": {
												"value": {
													"value": "@activity('Copy data1').output.usedParallelCopies",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ProcessedFiles": {
												"value": {
													"value": "@activity('Copy data1').output.filesRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ReadRows": {
												"value": {
													"value": "@activity('Copy data1').output.rowsRead",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"UsedDIU": {
												"value": {
													"value": "@activity('Copy data1').output.usedDataIntegrationUnits",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Stored procedure InsertLogExecutionDetails",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[InsertLogExecutionDetails]",
										"storedProcedureParameters": {
											"CopyDuration": {
												"value": {
													"value": "@activity('Copy data1').output.copyDuration",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"EndTime": {
												"value": {
													"value": "@activity('Copy data1').ExecutionEndTime",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"QueueDuration": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].profile.queue.duration",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"StartTime": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Status": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											},
											"TransferDuration": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].profile.transfer.duration",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Stored procedure LogActivityError of Copy data activity",
									"description": "log activity error in databaase",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[etl].[LogActivityError]",
										"storedProcedureParameters": {
											"ErrorCode": {
												"value": {
													"value": "@if(equals(activity('Copy data1').Error.errorCode,'InvalidTemplate'),activity('Copy data1').StatusCode,activity('Copy data1').Error.errorCode)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"ErrorDatetime": {
												"value": {
													"value": "@activity('Copy data1').ExecutionEndTime",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('Copy data1').Error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"FailureType": {
												"value": {
													"value": "@activity('Copy data1').Error.FailureType",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineActivityName": {
												"value": {
													"value": "@string('Copy data1')",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Stored procedure InsertLogPipeline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[InsertLogPipeline]",
							"storedProcedureParameters": {
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Log Lookup metadata table table error",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Lookup control metadata table",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[etl].[LogActivityError]",
							"storedProcedureParameters": {
								"ErrorCode": {
									"value": {
										"value": "@activity('Lookup control metadata table').Error.errorCode",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"ErrorDatetime": {
									"value": {
										"value": "@activity('Lookup control metadata table').ExecutionEndTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"ErrorMessage": {
									"value": {
										"value": "@activity('Lookup control metadata table').Error.Message",
										"type": "Expression"
									},
									"type": "String"
								},
								"FailureType": {
									"value": {
										"value": "@activity('Lookup control metadata table').error.failureType",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineActivityName": {
									"value": {
										"value": "@string('Lookup control metadata table')",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"RunID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"schema_and_table_name": {
						"type": "String"
					},
					"mapping": {
						"type": "String"
					},
					"meterType": {
						"type": "String"
					},
					"duration": {
						"type": "String"
					},
					"ActivityName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-24T08:27:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Write credits to db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "write credits to db",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_name",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipeline_id",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "credits*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [stg].[credits]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureDataLakeStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cast",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cast",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "crew",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "crew",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipeline_id",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "file_name",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adls_raw_movies_credits",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoviesDB_credits_tbl",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T11:00:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Write movies_metadata to db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "write movies_metadata to db",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_name",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipeline_id",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "movies_metadata*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [stg].[movies_metadata]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "adult",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "adult",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "budget",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "budget",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "homepage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "homepage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "overview",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "overview",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "popularity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "popularity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "release_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "release_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "runtime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "runtime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tagline",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tagline",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "video",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "video",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipeline_id",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "file_name",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adls_raw_movies_metadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoviesDB_movies_metadata_tbl",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-23T20:38:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Write ratings to db')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Write ratings to db",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_name",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipeline_id",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "ratings_part*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[ratings];",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureDataLakeStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipeline_id",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "file_name",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adls_raw_movies_ratings_part",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoviesDB_ratings_tbl",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-25T11:01:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyFromBlobToDatalake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "File_Name",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "azureblob",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "*"
								}
							},
							"fieldList": [
								{
									"value": "childItems",
									"type": "Expression"
								}
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "each_file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "File_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('File_Name').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy and rename data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@item().Name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "MergeFiles"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "AzureDataLakeStorage1",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "azureblob",
											"type": "DatasetReference",
											"parameters": {
												"fileName": "*"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "azuredatalake",
											"type": "DatasetReference",
											"parameters": {
												"TargetFilename": {
													"value": "@concat(string(replace(item().name,'.csv','')),\n'_', \nvariables('pipelineStartTime'), '.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineStartTime",
							"value": {
								"value": "@string(utcNow('yyyyMMddHHmmss'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"CurrentFileName": {
						"type": "String"
					},
					"pipelineStartTime": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-02T19:00:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/incremental load to OnlinePurchase table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from azure blob to SQL table",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set watermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "file_name",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipeline_id",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"modifiedDatetimeStart": {
										"value": "@variables('LastWatermarkDate')",
										"type": "Expression"
									},
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"transaction_id"
									]
								},
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['file_name']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipeline_id']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "AzureBlobOnlineContainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable_stg_online_purchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Retrive online_purchise table new watermark value",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Delete archived files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT max([transaction_date]) as newWatermark\n  FROM [stg].[online_purchase]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azureSQLDatabaseMovies_cinema_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "update watermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Set newWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@variables('newWatermarkDate')",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"TableName": {
									"value": "[[stg].[online_purchase]",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "polulate tOnlineService table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy from azure blob to SQL table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulate_tOnlineService]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "populate tOnlinePurchase  table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "polulate tOnlineService table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulate_tOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete archived files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Archive online purchases",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "AzureBlobOnlineContainer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": {
									"value": "@variables('LastWatermarkDate')",
									"type": "Expression"
								},
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Archive online purchases",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "populate tOnlinePurchase  table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"modifiedDatetimeStart": {
										"value": "@variables('LastWatermarkDate')",
										"type": "Expression"
									},
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "AzureBlobOnlineContainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DataLake_archive",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Retrive last watermark date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [Watermark]\n  FROM [dbo].[watermarkable]\n  where [TableName] = '[stg].[online_purchase]'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable_tOnlinePurchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set watermark",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Retrive last watermark date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "newWatermarkDate",
							"value": {
								"value": "@activity('Retrive last watermark date').output.firstRow.Watermark",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set newWatermark",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Retrive online_purchise table new watermark value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "newWatermarkDate",
							"value": {
								"value": "@activity('Retrive online_purchise table new watermark value').output.firstRow.newWatermark",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"newWatermarkDate": {
						"type": "String"
					},
					"LastWatermarkDate": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-25T11:07:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/populate stage tables')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "write credits to db",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_name",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipeline_id",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "credits*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [stg].[credits]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cast",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cast",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "crew",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "crew",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipeline_id",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "file_name",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adls_raw_movies_credits",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoviesDB_credits_tbl",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "write movies_metadata to db_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_name",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipeline_id",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "movies_metadata*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [stg].[movies_metadata]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "adult",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "adult",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "budget",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "budget",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "homepage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "homepage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "overview",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "overview",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "popularity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "popularity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "release_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "release_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "runtime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "runtime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tagline",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tagline",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "video",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "video",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipeline_id",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "file_name",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adls_raw_movies_metadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoviesDB_movies_metadata_tbl",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Write ratings part to db",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_name",
										"value": "$$FILEPATH"
									},
									{
										"name": "pipeline_id",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": false,
									"wildcardFileName": "ratings_part*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[ratings];",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipeline_id",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "file_name",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "adls_raw_movies_ratings_part",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoviesDB_ratings_tbl",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-27T09:43:27Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/practice pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Practice data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Practice data flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-11T07:22:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact data flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movies_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchise"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "DataMart_DimDate",
								"type": "DatasetReference"
							},
							"name": "DimDate"
						},
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "DataMartFactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "movies_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchaseForMonthlySnapshot"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtOnlineService",
								"type": "DatasetReference"
							},
							"name": "tDimOnlineServiceForMonthlySnapshot"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineServiceForMonthlySnapshot"
						},
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseMonthlySnapshot"
						},
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "DataMartFactMonthlySnapshot"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "sinkFactOnlinePurchaseMonthlySnapshot"
						}
					],
					"transformations": [
						{
							"name": "joinOnlineServiceCode"
						},
						{
							"name": "joinMoviedNK"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "joinMovieKey"
						},
						{
							"name": "joinDimDate"
						},
						{
							"name": "joinFactTable"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "joinServiceKey"
						},
						{
							"name": "joinMovie"
						},
						{
							"name": "joinDate"
						},
						{
							"name": "selecFactOnlinePurchasetSource"
						},
						{
							"name": "selectFactOnlinePurchaseSink"
						},
						{
							"name": "joinForServiceKey"
						},
						{
							"name": "jointForServiceCode"
						},
						{
							"name": "joinForOnlineServiceKey"
						},
						{
							"name": "aggregateMonthlySnapshotSource"
						},
						{
							"name": "MonthlySnapshotHash"
						},
						{
							"name": "joinMonthlySnapshotSink"
						},
						{
							"name": "selectSourceMonthlySnapshot"
						},
						{
							"name": "alterRowFactOnlinePurchaseMonthlySnapshot"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchise",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          TheDateKey as integer,",
						"          TheDate as date,",
						"          TheDay as integer,",
						"          TheDayName as string,",
						"          TheWeek as integer,",
						"          TheISOWeek as integer,",
						"          TheDayOfWeek as integer,",
						"          TheMonth as integer,",
						"          TheMonthName as string,",
						"          TheQuarter as integer,",
						"          TheYear as integer,",
						"          TheFirstOfMonth as date,",
						"          TheLastOfYear as date,",
						"          TheDayOfYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimDate",
						"source(output(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartFactOnlinePurchase",
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchaseForMonthlySnapshot",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tDimOnlineServiceForMonthlySnapshot",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineServiceForMonthlySnapshot",
						"source(output(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> FactOnlinePurchaseMonthlySnapshot",
						"source(output(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartFactMonthlySnapshot",
						"tOnlinePurchise, tOnlineService join(tOnlinePurchise@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlineServiceCode",
						"joinOnlineServiceCode, tMovies join(tOnlinePurchise@MovieId == tMovies@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMoviedNK",
						"derivedColumn1 alterRow(insertIf(isNull(Sink_TransactionId)),",
						"     updateIf(SourceHash!=SinkHash&&!isNull(SinkHash))) ~> AlterRow1",
						"joinForServiceKey, DimMovie join(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovieKey",
						"joinMovieKey, DimDate join(toDate(TransactionDate) == TheDate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimDate",
						"selecFactOnlinePurchasetSource, selectFactOnlinePurchaseSink join(Source_TransactionId == Sink_TransactionId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFactTable",
						"joinFactTable derive(SourceHash = sha2(256,concat(toString(Source_TheDate),Source_ServiceCode,toString(Source_MovieIdNK),toString(Source_Price))),",
						"          SinkHash = sha2(256,concat(toString(Sink_TheDate),Sink_ServiceCode,toString(Sink_MovieIdNK),toString(Source_Price)))) ~> derivedColumn1",
						"DataMartFactOnlinePurchase, DimOnlineService join(OnlineServiceKey == ServiceKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinServiceKey",
						"joinServiceKey, DimMovie join(DataMartFactOnlinePurchase@MovieKey == DimMovie@MovieKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovie",
						"joinMovie, DimDate join(DateKey == TheDateKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDate",
						"joinDimDate select(mapColumn(",
						"          Source_TheDateKey = TheDateKey,",
						"          Source_TheDate = TheDate,",
						"          Source_ServiceKey = ServiceKey,",
						"          Source_ServiceCode = tOnlineService@ServiceCode,",
						"          Source_MovieKey = MovieKey,",
						"          Source_MovieIdNK = tMovies@MovieIdNK,",
						"          Source_Price = Price,",
						"          Source_TransactionId = TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selecFactOnlinePurchasetSource",
						"joinDate select(mapColumn(",
						"          Sink_DateKey = DateKey,",
						"          Sink_TheDate = TheDate,",
						"          Sink_OnlineServiceKey = OnlineServiceKey,",
						"          Sink_ServiceCode = ServiceCode,",
						"          Sink_MovieKey = DataMartFactOnlinePurchase@MovieKey,",
						"          Sink_MovieIdNK = MovieIdNK,",
						"          Sink_Price = Price,",
						"          Sink_TransactionId = TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFactOnlinePurchaseSink",
						"joinMoviedNK, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinForServiceKey",
						"tOnlinePurchaseForMonthlySnapshot, tDimOnlineServiceForMonthlySnapshot join(tOnlinePurchaseForMonthlySnapshot@ServiceId == tDimOnlineServiceForMonthlySnapshot@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> jointForServiceCode",
						"jointForServiceCode, DimOnlineServiceForMonthlySnapshot join(tDimOnlineServiceForMonthlySnapshot@ServiceCode == DimOnlineServiceForMonthlySnapshot@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinForOnlineServiceKey",
						"joinForOnlineServiceKey aggregate(groupBy(MouthKey = year(TransactionDate)*100+month(TransactionDate),",
						"          ServiceKey),",
						"     TransactionId = toInteger(count(TransactionId)),",
						"          Price = toDecimal(sum(Price))) ~> aggregateMonthlySnapshotSource",
						"joinMonthlySnapshotSink derive(MonthlySnapshotSourceHash = sha2(256,concat(toString(ServiceKeySource),toString(PurchaseAmountSource),toString(PurchaseQuantitySource))),",
						"          MonthlySnapshotSinkHash = sha2(256,concat(toString(OnlineServiceKey),toString(PurchaseAmount),toString(PurchaseQuantity)))) ~> MonthlySnapshotHash",
						"selectSourceMonthlySnapshot, DataMartFactMonthlySnapshot join(MouthKeySource == MonthKey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMonthlySnapshotSink",
						"aggregateMonthlySnapshotSource select(mapColumn(",
						"          MouthKeySource = MouthKey,",
						"          ServiceKeySource = ServiceKey,",
						"          PurchaseAmountSource = Price,",
						"          PurchaseQuantitySource = TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSourceMonthlySnapshot",
						"MonthlySnapshotHash alterRow(insertIf(isNull(MonthKey)),",
						"     updateIf(!isNull(MonthKey)&&MonthlySnapshotSourceHash!=MonthlySnapshotSinkHash)) ~> alterRowFactOnlinePurchaseMonthlySnapshot",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['TransactionId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = Source_TheDateKey,",
						"          OnlineServiceKey = Source_ServiceKey,",
						"          MovieKey = Source_MovieKey,",
						"          Price = Source_Price,",
						"          TransactionId = Source_TransactionId",
						"     )) ~> FactOnlinePurchase",
						"alterRowFactOnlinePurchaseMonthlySnapshot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey = MouthKeySource,",
						"          OnlineServiceKey = ServiceKeySource,",
						"          PurchaseAmount = PurchaseAmountSource,",
						"          PurchaseQuantity = PurchaseQuantitySource",
						"     )) ~> sinkFactOnlinePurchaseMonthlySnapshot"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact tavdata flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movies_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchise"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "DataMart_DimDate",
								"type": "DatasetReference"
							},
							"name": "DimDate"
						},
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "DataMartFactOnlinePurchase"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						}
					],
					"transformations": [
						{
							"name": "joinOnlineServiceCode"
						},
						{
							"name": "joinMoviedNK"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "joinOnlineSeviceKey"
						},
						{
							"name": "joinMovieKey"
						},
						{
							"name": "joinDimDate"
						},
						{
							"name": "joinFactTable"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "joinServiceKey"
						},
						{
							"name": "joinMovie"
						},
						{
							"name": "joinDate"
						},
						{
							"name": "selectSource"
						},
						{
							"name": "selectSink"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchise",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          TheDateKey as integer,",
						"          TheDate as date,",
						"          TheDay as integer,",
						"          TheDayName as string,",
						"          TheWeek as integer,",
						"          TheISOWeek as integer,",
						"          TheDayOfWeek as integer,",
						"          TheMonth as integer,",
						"          TheMonthName as string,",
						"          TheQuarter as integer,",
						"          TheYear as integer,",
						"          TheFirstOfMonth as date,",
						"          TheLastOfYear as date,",
						"          TheDayOfYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimDate",
						"source(output(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartFactOnlinePurchase",
						"tOnlinePurchise, tOnlineService join(tOnlinePurchise@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlineServiceCode",
						"joinOnlineSeviceKey, tMovies join(tOnlinePurchise@MovieId == tMovies@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMoviedNK",
						"derivedColumn1 alterRow(insertIf(isNull(Sink_TransactionId)),",
						"     updateIf(SourceHash!=SinkHash)) ~> AlterRow1",
						"joinOnlineServiceCode, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlineSeviceKey",
						"joinMoviedNK, DimMovie join(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovieKey",
						"joinMovieKey, DimDate join(TransactionDate == TheDate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimDate",
						"selectSource, selectSink join(Source_TransactionId == Sink_TransactionId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFactTable",
						"joinFactTable derive(SourceHash = sha2(256,concat(toString(Source_TheDate),Source_ServiceCode,toString(Source_MovieIdNK),toString(Source_Price))),",
						"          SinkHash = sha2(256,concat(toString(Sink_TheDate),Sink_ServiceCode,toString(Sink_MovieIdNK),toString(Source_Price)))) ~> derivedColumn1",
						"DataMartFactOnlinePurchase, DimOnlineService join(OnlineServiceKey == ServiceKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinServiceKey",
						"joinServiceKey, DimMovie join(DataMartFactOnlinePurchase@MovieKey == DimMovie@MovieKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovie",
						"joinMovie, DimDate join(DateKey == TheDateKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDate",
						"joinDimDate select(mapColumn(",
						"          Source_TheDateKey = TheDateKey,",
						"          Source_TheDate = TheDate,",
						"          Source_ServiceKey = ServiceKey,",
						"          Source_ServiceCode = tOnlineService@ServiceCode,",
						"          Source_MovieKey = MovieKey,",
						"          Source_MovieIdNK = tMovies@MovieIdNK,",
						"          Source_Price = Price,",
						"          Source_TransactionId = TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSource",
						"joinDate select(mapColumn(",
						"          Sink_DateKey = DateKey,",
						"          Sink_TheDate = TheDate,",
						"          Sink_OnlineServiceKey = OnlineServiceKey,",
						"          Sink_ServiceCode = ServiceCode,",
						"          Sink_MovieKey = DataMartFactOnlinePurchase@MovieKey,",
						"          Sink_MovieIdNK = MovieIdNK,",
						"          Sink_Price = Price,",
						"          Sink_TransactionId = TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSink",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['TransactionId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = Source_TheDateKey,",
						"          OnlineServiceKey = Source_ServiceKey,",
						"          MovieKey = Source_MovieKey,",
						"          Price = Source_Price,",
						"          TransactionId = Source_TransactionId",
						"     )) ~> FactOnlinePurchase"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Movies and Services data flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDBtMovies",
								"type": "DatasetReference"
							},
							"name": "MoviesDBtMovies"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtMovieStatus",
								"type": "DatasetReference"
							},
							"name": "MoviesDBtMovieStatus"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "DataMartDimMovieForHash"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DataMartDimMovieService"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "DataMartDimMovie"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtOnlineService",
								"type": "DatasetReference"
							},
							"name": "MoviesDBtOnlineService"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtOnlineService",
								"type": "DatasetReference"
							},
							"name": "MoviesDBtOnlineServiceForHash"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "sink4"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "sink5"
						}
					],
					"transformations": [
						{
							"name": "lookupForUpdatedMovies"
						},
						{
							"name": "splitUpdatedMovies"
						},
						{
							"name": "GetMoviesDBHash"
						},
						{
							"name": "GetDataMartHash"
						},
						{
							"name": "lookupDataMartMovies"
						},
						{
							"name": "split1"
						},
						{
							"name": "joinMovieStatus"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "lookupForNewServices"
						},
						{
							"name": "split"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "split2"
						},
						{
							"name": "derivedColumn8"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MoviesDBtMovies",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MoviesDBtMovieStatus",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartDimMovieForHash",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartDimMovieService",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartDimMovie",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MoviesDBtOnlineService",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MoviesDBtOnlineServiceForHash",
						"GetMoviesDBHash, GetDataMartHash lookup(split1@oldMovies@MovieIdNK == DataMartDimMovieForHash@MovieIdNK,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookupForUpdatedMovies",
						"lookupForUpdatedMovies split(MoviesDBHash!=DataMartHash,",
						"     disjoint: true) ~> splitUpdatedMovies@(UpdatedMovies, OtherMovies)",
						"split1@oldMovies derive(MoviesDBHash = sha2(256,concat(toString(split1@oldMovies@MovieIdNK), split1@oldMovies@Title, toString(split1@oldMovies@ReleaseDate), toString(split1@oldMovies@Runtime)))) ~> GetMoviesDBHash",
						"DataMartDimMovieForHash derive(DataMartHash = sha2(256,concat(toString(MovieIdNK), Title, toString(ReleaseDate), toString(Runtime)))) ~> GetDataMartHash",
						"joinMovieStatus, DataMartDimMovie lookup(MoviesDBtMovies@MovieIdNK == DataMartDimMovie@MovieIdNK,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupDataMartMovies",
						"lookupDataMartMovies split(!isNull(DataMartDimMovie@MovieIdNK),",
						"     disjoint: false) ~> split1@(oldMovies, newMovies)",
						"MoviesDBtMovies, MoviesDBtMovieStatus join(MoviesDBtMovies@MovieStatusId == MoviesDBtMovieStatus@MovieStatusId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovieStatus",
						"splitUpdatedMovies@UpdatedMovies derive(ModifiedDate = currentTimestamp()) ~> derivedColumn3",
						"derivedColumn3 alterRow(updateIf(true())) ~> alterRow1",
						"split1@newMovies derive(CreatedDate = currentTimestamp(),",
						"          ModifiedDate = currentTimestamp()) ~> derivedColumn4",
						"MoviesDBtOnlineService, DataMartDimMovieService lookup(MoviesDBtOnlineService@ServiceCode == DataMartDimMovieService@ServiceCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupForNewServices",
						"lookupForNewServices split(isNull(DataMartDimMovieService@ServiceCode),",
						"     disjoint: false) ~> split@(NewService, OldService)",
						"split@NewService derive(CreatedDate = currentTimestamp(),",
						"          ModifiedDate = currentTimestamp()) ~> derivedColumn5",
						"split@OldService derive(OldHash = sha2(256,concat(split@OldService@ServiceCode, split@OldService@ServiceName))) ~> derivedColumn6",
						"MoviesDBtOnlineServiceForHash derive(NewHash = sha2(256,concat(ServiceCode, ServiceName))) ~> derivedColumn7",
						"derivedColumn6, derivedColumn7 lookup(split@OldService@ServiceCode == MoviesDBtOnlineServiceForHash@ServiceCode,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 split(OldHash!=NewHash,",
						"     disjoint: false) ~> split2@(UpdatedServices, OtherServices)",
						"split2@UpdatedServices derive(ModifiedDate = currentTimestamp()) ~> derivedColumn8",
						"derivedColumn8 alterRow(updateIf(true())) ~> alterRow2",
						"derivedColumn4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK = split1@newMovies@MovieIdNK,",
						"          Title = split1@newMovies@Title,",
						"          ReleaseDate = split1@newMovies@ReleaseDate,",
						"          Runtime = split1@newMovies@Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> sink2",
						"alterRow1 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Title = splitUpdatedMovies@UpdatedMovies@Title,",
						"          ReleaseDate = splitUpdatedMovies@UpdatedMovies@ReleaseDate,",
						"          Runtime = splitUpdatedMovies@UpdatedMovies@Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate = splitUpdatedMovies@UpdatedMovies@CreatedDate,",
						"          ModifiedDate",
						"     )) ~> sink3",
						"derivedColumn5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode = split@NewService@ServiceCode,",
						"          ServiceName = split@NewService@ServiceName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> sink4",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode = split2@UpdatedServices@ServiceCode,",
						"          ServiceName = split2@UpdatedServices@ServiceName,",
						"          ModifiedDate",
						"     )) ~> sink5"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMart movies data flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Movies populating data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Movies and Services data flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDBtMovies": {},
									"MoviesDBtMovieStatus": {},
									"DataMartDimMovieForHash": {},
									"DataMartDimMovieService": {},
									"DataMartDimMovie": {},
									"MoviesDBtOnlineService": {},
									"MoviesDBtOnlineServiceForHash": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"sink5": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-16T08:26:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Movies and Services data flow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact tables data flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow for fact tables population",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Fact data flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlinePurchise": {},
									"tOnlineService": {},
									"tMovies": {},
									"DimOnlineService": {},
									"DimMovie": {},
									"DimDate": {},
									"DataMartFactOnlinePurchase": {},
									"tOnlinePurchaseForMonthlySnapshot": {},
									"tDimOnlineServiceForMonthlySnapshot": {},
									"DimOnlineServiceForMonthlySnapshot": {},
									"FactOnlinePurchaseMonthlySnapshot": {},
									"DataMartFactMonthlySnapshot": {},
									"FactOnlinePurchase": {},
									"sinkFactOnlinePurchaseMonthlySnapshot": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-16T08:26:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Fact data flow')]"
			]
		}
	]
}