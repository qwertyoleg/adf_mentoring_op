{
	"name": "Fact data flow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "movies_tOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "tOnlinePurchise"
				},
				{
					"dataset": {
						"referenceName": "MoviesDBtOnlineService",
						"type": "DatasetReference"
					},
					"name": "tOnlineService"
				},
				{
					"dataset": {
						"referenceName": "MoviesDBtMovies",
						"type": "DatasetReference"
					},
					"name": "tMovies"
				},
				{
					"dataset": {
						"referenceName": "DataMartDimOnlineService",
						"type": "DatasetReference"
					},
					"name": "DimOnlineService"
				},
				{
					"dataset": {
						"referenceName": "DataMartDimMovie",
						"type": "DatasetReference"
					},
					"name": "DimMovie"
				},
				{
					"dataset": {
						"referenceName": "DataMart_DimDate",
						"type": "DatasetReference"
					},
					"name": "DimDate"
				},
				{
					"dataset": {
						"referenceName": "DataMart_FactOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "DataMartFactOnlinePurchase"
				},
				{
					"dataset": {
						"referenceName": "movies_tOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "tOnlinePurchaseForMonthlySnapshot"
				},
				{
					"dataset": {
						"referenceName": "MoviesDBtOnlineService",
						"type": "DatasetReference"
					},
					"name": "tDimOnlineServiceForMonthlySnapshot"
				},
				{
					"dataset": {
						"referenceName": "DataMartDimOnlineService",
						"type": "DatasetReference"
					},
					"name": "DimOnlineServiceForMonthlySnapshot"
				},
				{
					"dataset": {
						"referenceName": "DataMart_FactOnlinePurchase_MonthlySnapshot",
						"type": "DatasetReference"
					},
					"name": "FactOnlinePurchaseMonthlySnapshot"
				},
				{
					"dataset": {
						"referenceName": "DataMart_FactOnlinePurchase_MonthlySnapshot",
						"type": "DatasetReference"
					},
					"name": "DataMartFactMonthlySnapshot"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DataMart_FactOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "FactOnlinePurchase"
				},
				{
					"dataset": {
						"referenceName": "DataMart_FactOnlinePurchase_MonthlySnapshot",
						"type": "DatasetReference"
					},
					"name": "sinkFactOnlinePurchaseMonthlySnapshot"
				}
			],
			"transformations": [
				{
					"name": "joinOnlineServiceCode"
				},
				{
					"name": "joinMoviedNK"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "joinMovieKey"
				},
				{
					"name": "joinDimDate"
				},
				{
					"name": "joinFactTable"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "joinServiceKey"
				},
				{
					"name": "joinMovie"
				},
				{
					"name": "joinDate"
				},
				{
					"name": "selecFactOnlinePurchasetSource"
				},
				{
					"name": "selectFactOnlinePurchaseSink"
				},
				{
					"name": "joinForServiceKey"
				},
				{
					"name": "jointForServiceCode"
				},
				{
					"name": "joinForOnlineServiceKey"
				},
				{
					"name": "aggregateMonthlySnapshotSource"
				},
				{
					"name": "MonthlySnapshotHash"
				},
				{
					"name": "joinMonthlySnapshotSink"
				},
				{
					"name": "selectSourceMonthlySnapshot"
				},
				{
					"name": "alterRowFactOnlinePurchaseMonthlySnapshot"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as integer,",
				"          ServiceId as integer,",
				"          MovieId as integer,",
				"          UserId as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string,",
				"          TransactionDate as timestamp,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlinePurchise",
				"source(output(",
				"          ServiceId as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlineService",
				"source(output(",
				"          MovieId as integer,",
				"          MovieIdNK as integer,",
				"          Budget as integer,",
				"          HomepagePath as string,",
				"          Title as string,",
				"          OriginalTitle as string,",
				"          ReleaseDate as date,",
				"          Revenue as long,",
				"          Runtime as integer,",
				"          MovieStatusId as integer,",
				"          AvgVote as decimal(3,1),",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tMovies",
				"source(output(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimOnlineService",
				"source(output(",
				"          MovieKey as integer,",
				"          MovieIdNK as integer,",
				"          Title as string,",
				"          ReleaseDate as date,",
				"          Runtime as integer,",
				"          MovieStatus as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimMovie",
				"source(output(",
				"          TheDateKey as integer,",
				"          TheDate as date,",
				"          TheDay as integer,",
				"          TheDayName as string,",
				"          TheWeek as integer,",
				"          TheISOWeek as integer,",
				"          TheDayOfWeek as integer,",
				"          TheMonth as integer,",
				"          TheMonthName as string,",
				"          TheQuarter as integer,",
				"          TheYear as integer,",
				"          TheFirstOfMonth as date,",
				"          TheLastOfYear as date,",
				"          TheDayOfYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimDate",
				"source(output(",
				"          DateKey as integer,",
				"          OnlineServiceKey as integer,",
				"          MovieKey as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DataMartFactOnlinePurchase",
				"source(output(",
				"          Id as integer,",
				"          ServiceId as integer,",
				"          MovieId as integer,",
				"          UserId as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string,",
				"          TransactionDate as timestamp,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlinePurchaseForMonthlySnapshot",
				"source(output(",
				"          ServiceId as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tDimOnlineServiceForMonthlySnapshot",
				"source(output(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimOnlineServiceForMonthlySnapshot",
				"source(output(",
				"          MonthKey as integer,",
				"          OnlineServiceKey as integer,",
				"          PurchaseAmount as decimal(10,1),",
				"          PurchaseQuantity as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> FactOnlinePurchaseMonthlySnapshot",
				"source(output(",
				"          MonthKey as integer,",
				"          OnlineServiceKey as integer,",
				"          PurchaseAmount as decimal(10,1),",
				"          PurchaseQuantity as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DataMartFactMonthlySnapshot",
				"tOnlinePurchise, tOnlineService join(tOnlinePurchise@ServiceId == tOnlineService@ServiceId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinOnlineServiceCode",
				"joinOnlineServiceCode, tMovies join(tOnlinePurchise@MovieId == tMovies@MovieId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMoviedNK",
				"derivedColumn1 alterRow(insertIf(isNull(Sink_TransactionId)),",
				"     updateIf(SourceHash!=SinkHash&&!isNull(SinkHash))) ~> AlterRow1",
				"joinForServiceKey, DimMovie join(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMovieKey",
				"joinMovieKey, DimDate join(toDate(TransactionDate) == TheDate,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimDate",
				"selecFactOnlinePurchasetSource, selectFactOnlinePurchaseSink join(Source_TransactionId == Sink_TransactionId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinFactTable",
				"joinFactTable derive(SourceHash = sha2(256,concat(toString(Source_TheDate),Source_ServiceCode,toString(Source_MovieIdNK),toString(Source_Price))),",
				"          SinkHash = sha2(256,concat(toString(Sink_TheDate),Sink_ServiceCode,toString(Sink_MovieIdNK),toString(Source_Price)))) ~> derivedColumn1",
				"DataMartFactOnlinePurchase, DimOnlineService join(OnlineServiceKey == ServiceKey,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinServiceKey",
				"joinServiceKey, DimMovie join(DataMartFactOnlinePurchase@MovieKey == DimMovie@MovieKey,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMovie",
				"joinMovie, DimDate join(DateKey == TheDateKey,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDate",
				"joinDimDate select(mapColumn(",
				"          Source_TheDateKey = TheDateKey,",
				"          Source_TheDate = TheDate,",
				"          Source_ServiceKey = ServiceKey,",
				"          Source_ServiceCode = tOnlineService@ServiceCode,",
				"          Source_MovieKey = MovieKey,",
				"          Source_MovieIdNK = tMovies@MovieIdNK,",
				"          Source_Price = Price,",
				"          Source_TransactionId = TransactionId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selecFactOnlinePurchasetSource",
				"joinDate select(mapColumn(",
				"          Sink_DateKey = DateKey,",
				"          Sink_TheDate = TheDate,",
				"          Sink_OnlineServiceKey = OnlineServiceKey,",
				"          Sink_ServiceCode = ServiceCode,",
				"          Sink_MovieKey = DataMartFactOnlinePurchase@MovieKey,",
				"          Sink_MovieIdNK = MovieIdNK,",
				"          Sink_Price = Price,",
				"          Sink_TransactionId = TransactionId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFactOnlinePurchaseSink",
				"joinMoviedNK, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinForServiceKey",
				"tOnlinePurchaseForMonthlySnapshot, tDimOnlineServiceForMonthlySnapshot join(tOnlinePurchaseForMonthlySnapshot@ServiceId == tDimOnlineServiceForMonthlySnapshot@ServiceId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> jointForServiceCode",
				"jointForServiceCode, DimOnlineServiceForMonthlySnapshot join(tDimOnlineServiceForMonthlySnapshot@ServiceCode == DimOnlineServiceForMonthlySnapshot@ServiceCode,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinForOnlineServiceKey",
				"joinForOnlineServiceKey aggregate(groupBy(MouthKey = year(TransactionDate)*100+month(TransactionDate),",
				"          ServiceKey),",
				"     TransactionId = toInteger(count(TransactionId)),",
				"          Price = toDecimal(sum(Price))) ~> aggregateMonthlySnapshotSource",
				"joinMonthlySnapshotSink derive(MonthlySnapshotSourceHash = sha2(256,concat(toString(ServiceKeySource),toString(PurchaseAmountSource),toString(PurchaseQuantitySource))),",
				"          MonthlySnapshotSinkHash = sha2(256,concat(toString(OnlineServiceKey),toString(PurchaseAmount),toString(PurchaseQuantity)))) ~> MonthlySnapshotHash",
				"selectSourceMonthlySnapshot, DataMartFactMonthlySnapshot join(MouthKeySource == MonthKey,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMonthlySnapshotSink",
				"aggregateMonthlySnapshotSource select(mapColumn(",
				"          MouthKeySource = MouthKey,",
				"          ServiceKeySource = ServiceKey,",
				"          PurchaseAmountSource = Price,",
				"          PurchaseQuantitySource = TransactionId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSourceMonthlySnapshot",
				"MonthlySnapshotHash alterRow(insertIf(isNull(MonthKey)),",
				"     updateIf(!isNull(MonthKey)&&MonthlySnapshotSourceHash!=MonthlySnapshotSinkHash)) ~> alterRowFactOnlinePurchaseMonthlySnapshot",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DateKey as integer,",
				"          OnlineServiceKey as integer,",
				"          MovieKey as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['TransactionId'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          DateKey = Source_TheDateKey,",
				"          OnlineServiceKey = Source_ServiceKey,",
				"          MovieKey = Source_MovieKey,",
				"          Price = Source_Price,",
				"          TransactionId = Source_TransactionId",
				"     )) ~> FactOnlinePurchase",
				"alterRowFactOnlinePurchaseMonthlySnapshot sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          MonthKey as integer,",
				"          OnlineServiceKey as integer,",
				"          PurchaseAmount as decimal(10,1),",
				"          PurchaseQuantity as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MonthKey = MouthKeySource,",
				"          OnlineServiceKey = ServiceKeySource,",
				"          PurchaseAmount = PurchaseAmountSource,",
				"          PurchaseQuantity = PurchaseQuantitySource",
				"     )) ~> sinkFactOnlinePurchaseMonthlySnapshot"
			]
		}
	}
}