{
	"name": "Practice data flow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "blobdataset_movies_metadata",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DatalakeOutputContainer",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          adult as string,",
				"          belongs_to_collection as string,",
				"          budget as string,",
				"          genres as string,",
				"          homepage as string,",
				"          id as string,",
				"          imdb_id as string,",
				"          original_language as string,",
				"          original_title as string,",
				"          overview as string,",
				"          popularity as string,",
				"          poster_path as string,",
				"          production_companies as string,",
				"          production_countries as string,",
				"          release_date as string,",
				"          revenue as string,",
				"          runtime as string,",
				"          spoken_languages as string,",
				"          status as string,",
				"          tagline as string,",
				"          title as string,",
				"          video as string,",
				"          vote_average as string,",
				"          vote_count as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 filter(year(toDate(release_date, 'yyyy-MM-dd')) >= 1910 && year(toDate(release_date, 'yyyy-MM-dd')) <= 2000 && rlike(genres, 'Comedy')) ~> filter1",
				"filter1 aggregate(groupBy(genres,",
				"          release_date = year(toDate(release_date))),",
				"     popularity = avg(toInteger(popularity))) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}