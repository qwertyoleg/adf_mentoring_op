{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-op"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Fact data flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movies_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchise"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "DataMart_DimDate",
								"type": "DatasetReference"
							},
							"name": "DimDate"
						},
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "DataMartFactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "movies_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchaseForMonthlySnapshot"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtOnlineService",
								"type": "DatasetReference"
							},
							"name": "tDimOnlineServiceForMonthlySnapshot"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineServiceForMonthlySnapshot"
						},
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchaseMonthlySnapshot"
						},
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "DataMartFactMonthlySnapshot"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "sinkFactOnlinePurchaseMonthlySnapshot"
						}
					],
					"transformations": [
						{
							"name": "joinOnlineServiceCode"
						},
						{
							"name": "joinMoviedNK"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "joinMovieKey"
						},
						{
							"name": "joinDimDate"
						},
						{
							"name": "joinFactTable"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "joinServiceKey"
						},
						{
							"name": "joinMovie"
						},
						{
							"name": "joinDate"
						},
						{
							"name": "selecFactOnlinePurchasetSource"
						},
						{
							"name": "selectFactOnlinePurchaseSink"
						},
						{
							"name": "joinForServiceKey"
						},
						{
							"name": "jointForServiceCode"
						},
						{
							"name": "joinForOnlineServiceKey"
						},
						{
							"name": "aggregateMonthlySnapshotSource"
						},
						{
							"name": "MonthlySnapshotHash"
						},
						{
							"name": "joinMonthlySnapshotSink"
						},
						{
							"name": "selectSourceMonthlySnapshot"
						},
						{
							"name": "alterRowFactOnlinePurchaseMonthlySnapshot"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchise",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          TheDateKey as integer,",
						"          TheDate as date,",
						"          TheDay as integer,",
						"          TheDayName as string,",
						"          TheWeek as integer,",
						"          TheISOWeek as integer,",
						"          TheDayOfWeek as integer,",
						"          TheMonth as integer,",
						"          TheMonthName as string,",
						"          TheQuarter as integer,",
						"          TheYear as integer,",
						"          TheFirstOfMonth as date,",
						"          TheLastOfYear as date,",
						"          TheDayOfYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimDate",
						"source(output(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartFactOnlinePurchase",
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchaseForMonthlySnapshot",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tDimOnlineServiceForMonthlySnapshot",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineServiceForMonthlySnapshot",
						"source(output(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> FactOnlinePurchaseMonthlySnapshot",
						"source(output(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartFactMonthlySnapshot",
						"tOnlinePurchise, tOnlineService join(tOnlinePurchise@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlineServiceCode",
						"joinOnlineServiceCode, tMovies join(tOnlinePurchise@MovieId == tMovies@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMoviedNK",
						"derivedColumn1 alterRow(insertIf(isNull(Sink_TransactionId)),",
						"     updateIf(SourceHash!=SinkHash&&!isNull(SinkHash))) ~> AlterRow1",
						"joinForServiceKey, DimMovie join(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovieKey",
						"joinMovieKey, DimDate join(toDate(TransactionDate) == TheDate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimDate",
						"selecFactOnlinePurchasetSource, selectFactOnlinePurchaseSink join(Source_TransactionId == Sink_TransactionId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFactTable",
						"joinFactTable derive(SourceHash = sha2(256,concat(toString(Source_TheDate),Source_ServiceCode,toString(Source_MovieIdNK),toString(Source_Price))),",
						"          SinkHash = sha2(256,concat(toString(Sink_TheDate),Sink_ServiceCode,toString(Sink_MovieIdNK),toString(Source_Price)))) ~> derivedColumn1",
						"DataMartFactOnlinePurchase, DimOnlineService join(OnlineServiceKey == ServiceKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinServiceKey",
						"joinServiceKey, DimMovie join(DataMartFactOnlinePurchase@MovieKey == DimMovie@MovieKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovie",
						"joinMovie, DimDate join(DateKey == TheDateKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDate",
						"joinDimDate select(mapColumn(",
						"          Source_TheDateKey = TheDateKey,",
						"          Source_TheDate = TheDate,",
						"          Source_ServiceKey = ServiceKey,",
						"          Source_ServiceCode = tOnlineService@ServiceCode,",
						"          Source_MovieKey = MovieKey,",
						"          Source_MovieIdNK = tMovies@MovieIdNK,",
						"          Source_Price = Price,",
						"          Source_TransactionId = TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selecFactOnlinePurchasetSource",
						"joinDate select(mapColumn(",
						"          Sink_DateKey = DateKey,",
						"          Sink_TheDate = TheDate,",
						"          Sink_OnlineServiceKey = OnlineServiceKey,",
						"          Sink_ServiceCode = ServiceCode,",
						"          Sink_MovieKey = DataMartFactOnlinePurchase@MovieKey,",
						"          Sink_MovieIdNK = MovieIdNK,",
						"          Sink_Price = Price,",
						"          Sink_TransactionId = TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFactOnlinePurchaseSink",
						"joinMoviedNK, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinForServiceKey",
						"tOnlinePurchaseForMonthlySnapshot, tDimOnlineServiceForMonthlySnapshot join(tOnlinePurchaseForMonthlySnapshot@ServiceId == tDimOnlineServiceForMonthlySnapshot@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> jointForServiceCode",
						"jointForServiceCode, DimOnlineServiceForMonthlySnapshot join(tDimOnlineServiceForMonthlySnapshot@ServiceCode == DimOnlineServiceForMonthlySnapshot@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinForOnlineServiceKey",
						"joinForOnlineServiceKey aggregate(groupBy(MouthKey = year(TransactionDate)*100+month(TransactionDate),",
						"          ServiceKey),",
						"     TransactionId = toInteger(count(TransactionId)),",
						"          Price = toDecimal(sum(Price))) ~> aggregateMonthlySnapshotSource",
						"joinMonthlySnapshotSink derive(MonthlySnapshotSourceHash = sha2(256,concat(toString(ServiceKeySource),toString(PurchaseAmountSource),toString(PurchaseQuantitySource))),",
						"          MonthlySnapshotSinkHash = sha2(256,concat(toString(OnlineServiceKey),toString(PurchaseAmount),toString(PurchaseQuantity)))) ~> MonthlySnapshotHash",
						"selectSourceMonthlySnapshot, DataMartFactMonthlySnapshot join(MouthKeySource == MonthKey,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMonthlySnapshotSink",
						"aggregateMonthlySnapshotSource select(mapColumn(",
						"          MouthKeySource = MouthKey,",
						"          ServiceKeySource = ServiceKey,",
						"          PurchaseAmountSource = Price,",
						"          PurchaseQuantitySource = TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSourceMonthlySnapshot",
						"MonthlySnapshotHash alterRow(insertIf(isNull(MonthKey)),",
						"     updateIf(!isNull(MonthKey)&&MonthlySnapshotSourceHash!=MonthlySnapshotSinkHash)) ~> alterRowFactOnlinePurchaseMonthlySnapshot",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['TransactionId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = Source_TheDateKey,",
						"          OnlineServiceKey = Source_ServiceKey,",
						"          MovieKey = Source_MovieKey,",
						"          Price = Source_Price,",
						"          TransactionId = Source_TransactionId",
						"     )) ~> FactOnlinePurchase",
						"alterRowFactOnlinePurchaseMonthlySnapshot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey = MouthKeySource,",
						"          OnlineServiceKey = ServiceKeySource,",
						"          PurchaseAmount = PurchaseAmountSource,",
						"          PurchaseQuantity = PurchaseQuantitySource",
						"     )) ~> sinkFactOnlinePurchaseMonthlySnapshot"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact tavdata flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "movies_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchise"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "DataMart_DimDate",
								"type": "DatasetReference"
							},
							"name": "DimDate"
						},
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "DataMartFactOnlinePurchase"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataMart_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						}
					],
					"transformations": [
						{
							"name": "joinOnlineServiceCode"
						},
						{
							"name": "joinMoviedNK"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "joinOnlineSeviceKey"
						},
						{
							"name": "joinMovieKey"
						},
						{
							"name": "joinDimDate"
						},
						{
							"name": "joinFactTable"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "joinServiceKey"
						},
						{
							"name": "joinMovie"
						},
						{
							"name": "joinDate"
						},
						{
							"name": "selectSource"
						},
						{
							"name": "selectSink"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchise",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          TheDateKey as integer,",
						"          TheDate as date,",
						"          TheDay as integer,",
						"          TheDayName as string,",
						"          TheWeek as integer,",
						"          TheISOWeek as integer,",
						"          TheDayOfWeek as integer,",
						"          TheMonth as integer,",
						"          TheMonthName as string,",
						"          TheQuarter as integer,",
						"          TheYear as integer,",
						"          TheFirstOfMonth as date,",
						"          TheLastOfYear as date,",
						"          TheDayOfYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimDate",
						"source(output(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartFactOnlinePurchase",
						"tOnlinePurchise, tOnlineService join(tOnlinePurchise@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlineServiceCode",
						"joinOnlineSeviceKey, tMovies join(tOnlinePurchise@MovieId == tMovies@MovieId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMoviedNK",
						"derivedColumn1 alterRow(insertIf(isNull(Sink_TransactionId)),",
						"     updateIf(SourceHash!=SinkHash)) ~> AlterRow1",
						"joinOnlineServiceCode, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOnlineSeviceKey",
						"joinMoviedNK, DimMovie join(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovieKey",
						"joinMovieKey, DimDate join(TransactionDate == TheDate,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimDate",
						"selectSource, selectSink join(Source_TransactionId == Sink_TransactionId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFactTable",
						"joinFactTable derive(SourceHash = sha2(256,concat(toString(Source_TheDate),Source_ServiceCode,toString(Source_MovieIdNK),toString(Source_Price))),",
						"          SinkHash = sha2(256,concat(toString(Sink_TheDate),Sink_ServiceCode,toString(Sink_MovieIdNK),toString(Source_Price)))) ~> derivedColumn1",
						"DataMartFactOnlinePurchase, DimOnlineService join(OnlineServiceKey == ServiceKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinServiceKey",
						"joinServiceKey, DimMovie join(DataMartFactOnlinePurchase@MovieKey == DimMovie@MovieKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovie",
						"joinMovie, DimDate join(DateKey == TheDateKey,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDate",
						"joinDimDate select(mapColumn(",
						"          Source_TheDateKey = TheDateKey,",
						"          Source_TheDate = TheDate,",
						"          Source_ServiceKey = ServiceKey,",
						"          Source_ServiceCode = tOnlineService@ServiceCode,",
						"          Source_MovieKey = MovieKey,",
						"          Source_MovieIdNK = tMovies@MovieIdNK,",
						"          Source_Price = Price,",
						"          Source_TransactionId = TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSource",
						"joinDate select(mapColumn(",
						"          Sink_DateKey = DateKey,",
						"          Sink_TheDate = TheDate,",
						"          Sink_OnlineServiceKey = OnlineServiceKey,",
						"          Sink_ServiceCode = ServiceCode,",
						"          Sink_MovieKey = DataMartFactOnlinePurchase@MovieKey,",
						"          Sink_MovieIdNK = MovieIdNK,",
						"          Sink_Price = Price,",
						"          Sink_TransactionId = TransactionId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSink",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['TransactionId'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = Source_TheDateKey,",
						"          OnlineServiceKey = Source_ServiceKey,",
						"          MovieKey = Source_MovieKey,",
						"          Price = Source_Price,",
						"          TransactionId = Source_TransactionId",
						"     )) ~> FactOnlinePurchase"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Movies and Services data flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDBtMovies",
								"type": "DatasetReference"
							},
							"name": "MoviesDBtMovies"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtMovieStatus",
								"type": "DatasetReference"
							},
							"name": "MoviesDBtMovieStatus"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "DataMartDimMovieForHash"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DataMartDimMovieService"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "DataMartDimMovie"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtOnlineService",
								"type": "DatasetReference"
							},
							"name": "MoviesDBtOnlineService"
						},
						{
							"dataset": {
								"referenceName": "MoviesDBtOnlineService",
								"type": "DatasetReference"
							},
							"name": "MoviesDBtOnlineServiceForHash"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimMovie",
								"type": "DatasetReference"
							},
							"name": "sink3"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "sink4"
						},
						{
							"dataset": {
								"referenceName": "DataMartDimOnlineService",
								"type": "DatasetReference"
							},
							"name": "sink5"
						}
					],
					"transformations": [
						{
							"name": "lookupForUpdatedMovies"
						},
						{
							"name": "splitUpdatedMovies"
						},
						{
							"name": "GetMoviesDBHash"
						},
						{
							"name": "GetDataMartHash"
						},
						{
							"name": "lookupDataMartMovies"
						},
						{
							"name": "split1"
						},
						{
							"name": "joinMovieStatus"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "lookupForNewServices"
						},
						{
							"name": "split"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "split2"
						},
						{
							"name": "derivedColumn8"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MoviesDBtMovies",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MoviesDBtMovieStatus",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartDimMovieForHash",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartDimMovieService",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataMartDimMovie",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MoviesDBtOnlineService",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> MoviesDBtOnlineServiceForHash",
						"GetMoviesDBHash, GetDataMartHash lookup(split1@oldMovies@MovieIdNK == DataMartDimMovieForHash@MovieIdNK,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookupForUpdatedMovies",
						"lookupForUpdatedMovies split(MoviesDBHash!=DataMartHash,",
						"     disjoint: true) ~> splitUpdatedMovies@(UpdatedMovies, OtherMovies)",
						"split1@oldMovies derive(MoviesDBHash = sha2(256,concat(toString(split1@oldMovies@MovieIdNK), split1@oldMovies@Title, toString(split1@oldMovies@ReleaseDate), toString(split1@oldMovies@Runtime)))) ~> GetMoviesDBHash",
						"DataMartDimMovieForHash derive(DataMartHash = sha2(256,concat(toString(MovieIdNK), Title, toString(ReleaseDate), toString(Runtime)))) ~> GetDataMartHash",
						"joinMovieStatus, DataMartDimMovie lookup(MoviesDBtMovies@MovieIdNK == DataMartDimMovie@MovieIdNK,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupDataMartMovies",
						"lookupDataMartMovies split(!isNull(DataMartDimMovie@MovieIdNK),",
						"     disjoint: false) ~> split1@(oldMovies, newMovies)",
						"MoviesDBtMovies, MoviesDBtMovieStatus join(MoviesDBtMovies@MovieStatusId == MoviesDBtMovieStatus@MovieStatusId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMovieStatus",
						"splitUpdatedMovies@UpdatedMovies derive(ModifiedDate = currentTimestamp()) ~> derivedColumn3",
						"derivedColumn3 alterRow(updateIf(true())) ~> alterRow1",
						"split1@newMovies derive(CreatedDate = currentTimestamp(),",
						"          ModifiedDate = currentTimestamp()) ~> derivedColumn4",
						"MoviesDBtOnlineService, DataMartDimMovieService lookup(MoviesDBtOnlineService@ServiceCode == DataMartDimMovieService@ServiceCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupForNewServices",
						"lookupForNewServices split(isNull(DataMartDimMovieService@ServiceCode),",
						"     disjoint: false) ~> split@(NewService, OldService)",
						"split@NewService derive(CreatedDate = currentTimestamp(),",
						"          ModifiedDate = currentTimestamp()) ~> derivedColumn5",
						"split@OldService derive(OldHash = sha2(256,concat(split@OldService@ServiceCode, split@OldService@ServiceName))) ~> derivedColumn6",
						"MoviesDBtOnlineServiceForHash derive(NewHash = sha2(256,concat(ServiceCode, ServiceName))) ~> derivedColumn7",
						"derivedColumn6, derivedColumn7 lookup(split@OldService@ServiceCode == MoviesDBtOnlineServiceForHash@ServiceCode,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 split(OldHash!=NewHash,",
						"     disjoint: false) ~> split2@(UpdatedServices, OtherServices)",
						"split2@UpdatedServices derive(ModifiedDate = currentTimestamp()) ~> derivedColumn8",
						"derivedColumn8 alterRow(updateIf(true())) ~> alterRow2",
						"derivedColumn4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK = split1@newMovies@MovieIdNK,",
						"          Title = split1@newMovies@Title,",
						"          ReleaseDate = split1@newMovies@ReleaseDate,",
						"          Runtime = split1@newMovies@Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> sink2",
						"alterRow1 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Title = splitUpdatedMovies@UpdatedMovies@Title,",
						"          ReleaseDate = splitUpdatedMovies@UpdatedMovies@ReleaseDate,",
						"          Runtime = splitUpdatedMovies@UpdatedMovies@Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate = splitUpdatedMovies@UpdatedMovies@CreatedDate,",
						"          ModifiedDate",
						"     )) ~> sink3",
						"derivedColumn5 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode = split@NewService@ServiceCode,",
						"          ServiceName = split@NewService@ServiceName,",
						"          CreatedDate,",
						"          ModifiedDate",
						"     )) ~> sink4",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode = split2@UpdatedServices@ServiceCode,",
						"          ServiceName = split2@UpdatedServices@ServiceName,",
						"          ModifiedDate",
						"     )) ~> sink5"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMart movies data flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Movies populating data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Movies and Services data flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDBtMovies": {},
									"MoviesDBtMovieStatus": {},
									"DataMartDimMovieForHash": {},
									"DataMartDimMovieService": {},
									"DataMartDimMovie": {},
									"MoviesDBtOnlineService": {},
									"MoviesDBtOnlineServiceForHash": {},
									"sink2": {},
									"sink3": {},
									"sink4": {},
									"sink5": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-16T08:26:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Movies and Services data flow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact tables data flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow for fact tables population",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Fact data flow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlinePurchise": {},
									"tOnlineService": {},
									"tMovies": {},
									"DimOnlineService": {},
									"DimMovie": {},
									"DimDate": {},
									"DataMartFactOnlinePurchase": {},
									"tOnlinePurchaseForMonthlySnapshot": {},
									"tDimOnlineServiceForMonthlySnapshot": {},
									"DimOnlineServiceForMonthlySnapshot": {},
									"FactOnlinePurchaseMonthlySnapshot": {},
									"DataMartFactMonthlySnapshot": {},
									"FactOnlinePurchase": {},
									"sinkFactOnlinePurchaseMonthlySnapshot": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-05-16T08:26:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Fact data flow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy files from blob to azure",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy files from blob to azure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PopulateDBFromStage",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "populate stage tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PopulateDBFromStage",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "populate stage tables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy files from blob to azure",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "populate stage tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Archive files pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "PopulateDBFromStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Archive files pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-24T15:20:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Master pipline for Online Purchases')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Archive online purchases data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Retrive online_purchise table new watermark value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Archive online purchases data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"TransactionDate": {
									"value": "@activity('Retrive online_purchise table new watermark value').output.firstRow.newWatermark",
									"type": "Expression"
								},
								"LastWatermarkDate": {
									"value": "@activity('Retrive last watermark date').output.firstRow.Watermark",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load data to online_purchase staging table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Retrive last watermark date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load data to online_purchase staging table",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"LastWatermarkDate": {
									"value": "@activity('Retrive last watermark date').output.firstRow.Watermark",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "load  tOnlineService and tOnlinePurchase tables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load data to online_purchase staging table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "load staging data to tOnlineService and tOnlinePurchase tables",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Retrive last watermark date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [Watermark]\n  FROM [dbo].[watermarkable]\n  where [TableName] = '[stg].[online_purchase]'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable_tOnlinePurchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Retrive online_purchise table new watermark value",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "load  tOnlineService and tOnlinePurchase tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT max([TransactionDate]) as newWatermark\n  FROM [dbo].[tOnlinePurchase]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "azureSQLDatabaseMovies_cinema_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-25T10:07:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/filed parent pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fail test",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Fail test",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Fail test",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "Get logic app url from secret",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": true
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@decodeUriComponent(activity('Get logic app url from secret').output)",
								"type": "Expression"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n\"dataFactoryName\" : \"@{pipeline().DataFactory}\", \n\"pipelineName\" : \"@{pipeline().Pipeline}\",\n\"ErrorMessage\": \"@{string(replace(activity('Fail test').output.errors[0].Message, '\"',''''))}\"\n\"Status\": \"@{activity('Fail test').output.status}\"\n   }",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get logic app url from secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": true,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(string(pipeline().globalParameters.LogicAppAzurementoringlogappsopURL), '?api-version=7.0')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"logicAppURL": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-06-05T11:39:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/daily trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Incremental load from local db",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-04-11T08:14:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								16
							],
							"hours": [
								8
							]
						}
					}
				}
			},
			"dependsOn": []
		}
	]
}